//
// Tag selector
// --------------------------------------------------

.tag-selector {
	@include mouse-and-bp-up(md) {
		flex: 0 0 $tag-selector-height;
		display: flex;
		flex-direction: column;
		border-top: var(--material-border-quarternary);
		line-height: $line-height-base;
		min-height: 0;

		.scroll-container {
			overflow-y: auto;
		}

		&.collapsed {
			flex: 0 0 $tag-selector-collapsed-height;
		}

		.tag-selector-toggle {
			flex: 0 0 auto;
			width: 100%;
			border: 0;
			padding: 3px;
			line-height: 2px;
			background-color: $sidebar-bg;
			border-radius: 0;

			@supports not (-webkit-font-smoothing: subpixel-antialiased) {
				@include variant("html.scrollbar-style-permanent") {
					border-bottom: $border-width solid $tag-selector-border-color;
				}
			}

			.icon {
				vertical-align: top;
				color: $tag-selector-grip-color;
			}

			&:focus .icon {
				color: $tag-selector-grip-color-active;
			}
		}

		.tag-selector-container {
			@include state(".tag-selector.collapsed") {
				display: none;
			}
		}

		.tag-selector-list {
			display: flex;
			flex-wrap: wrap;
			align-content: flex-start;
			height: 100%;
			font-size: $font-size-small;
			padding: 1px ($default-padding-x - 7px) $space-min ($space-md - 7px);
		}

		.tag {
			flex: 0 1 auto;
			display: flex;
			align-items: center;
			padding: 0 $tag-padding-x;
			margin: $space-min ($space-min * 0.25);
			border-radius: $tag-border-radius;
			cursor: pointer;
			min-width: 0;

			&:hover:not(.disabled) {
				background-color: $tag-hover-bg;
			}

			&:active {
				background-color: $tag-selected-bg;
			}

			&.selected {
				background-color: $tag-selected-bg;

				&:active {
					background-color: $tag-hover-bg;
				}
			}

			&.colored {
				font-weight: 600;

				&.selected,
				&:active {
					background-color: currentColor;

					@each $colorHex, $colorVar in $tagColorsLookup {
						@include state('.tag[data-color="#{$colorHex}"]') {
							background-color: var($colorVar);
						}
					}
				}

				&.selected:active {
					background-color: $tag-hover-bg;
				}
			}

			&.disabled {
				opacity: 0.5;
				cursor: auto;
			}

			&.dnd-target {
				background-color: $dnd-target-color;
			}

			.tag-label {
				color: var(--fill-primary);
				@include text-truncate;

				@include state(".tag.selected", ".tag:active") {
					color: var(--color-background);
				}

				@include state(".tag.selected:active") {
					color: var(--fill-primary);
				}
			}

			&:not(.emoji)::before {
				@include variant(".tag.colored") {
					content: "";
					display: block;
					width: 10px;
					height: 10px;
					background-color: currentColor;
					margin-right: $space-min;
					border-radius: 5px;
					border: $border-width solid var(--tag-color-border);

					@each $colorHex, $colorVar in $tagColorsLookup {
						@include state('.tag[data-color="#{$colorHex}"]') {
							background-color: var($colorVar);
						}
					}

					@include state(".colored.selected", ".colored:active") {
						border-color: var(--color-button);
					}

					@include state(".colored.selected:active") {
						border-color: var(--tag-color-border);
					}
				}
			}
		}

		.tag-selector-filter-container {
			flex: 0 0 auto;
			display: flex;
			align-items: center;
			background: $sidebar-bg;
			padding: $space-min $default-padding-x $space-min;
			margin-top: auto;

			@include state(".tag-selector.collapsed") {
				display: none;
			}

			@supports not (-webkit-font-smoothing: subpixel-antialiased) {
				@include variant("html.scrollbar-style-permanent") {
					border-top: $border-width solid $tag-selector-border-color;
				}
			}
		}

		.dropdown {
			flex: 0 0 auto;
			margin-left: 5px;
			margin-right: -$space-min - 2px;
		}
	}

	.tag-manager-open-info {
		align-items: center;
		color: $info-view-color;
		display: flex;
		flex: 1 1 auto;
		justify-content: center;
	}
}
